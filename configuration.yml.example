# Add this to your configuration.yaml
rest_command:
  send_sms:
    url: "https://api.twilio.com/2010-04-01/Accounts/YOUR_ACCOUNT_SID/Messages.json"
    method: POST
    content_type: "application/x-www-form-urlencoded"
    username: "YOUR_ACCOUNT_SID"
    password: "YOUR_AUTH_TOKEN"
    payload: "To={{ phone_number }}&From=YOUR_TWILIO_PHONE_NUMBER&Body={{ message }}"

    # Add to configuration.yaml
webhook:

# Create a sensor to store SMS messages
sensor:
  - platform: template
    sensors:
      sms_messages:
        value_template: "{{ state_attr('sensor.sms_messages', 'messages') | tojson }}"
        attribute_templates:
          messages: "{{ state_attr('sensor.sms_messages', 'messages') or [] }}"

# Automation to handle incoming SMS webhook
automation:
  - alias: "Handle Incoming SMS"
    trigger:
      platform: webhook
      webhook_id: incoming_sms
    action:
      - service: python_script.process_incoming_sms
        data_template:
          payload: "{{ trigger.json }}"

# Create a Python script to process incoming SMS
python_script:
  process_incoming_sms.py: |
    import datetime
    
    # Get the webhook payload from Twilio
    # Twilio sends form data, not JSON
    payload = data.get('payload', {})
    
    # Extract SMS details from Twilio format
    phone_number = payload.get('From', 'Unknown')
    message_content = payload.get('Body', '')
    # Twilio uses SmsStatus and DateCreated fields
    sms_status = payload.get('SmsStatus', 'received')
    # Use current time if DateCreated isn't provided
    timestamp = payload.get('DateCreated', datetime.datetime.now().isoformat())
    
    # Get current messages
    current_messages = hass.states.get('sensor.sms_messages').attributes.get('messages', [])
    
    # Add new message
    new_message = {
        'from': phone_number,
        'content': message_content,
        'timestamp': timestamp
    }
    
    # Prepend to list (newest first)
    updated_messages = [new_message] + current_messages
    
    # Limit to last 50 messages to prevent excessive growth
    if len(updated_messages) > 50:
        updated_messages = updated_messages[:50]
    
    # Update the sensor
    hass.states.set('sensor.sms_messages', len(updated_messages), {
        'messages': updated_messages,
        'friendly_name': 'SMS Messages'
    })