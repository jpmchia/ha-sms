(()=>{class e extends HTMLElement{set hass(e){this.content||(this.innerHTML='\n          <ha-card header="Send SMS">\n            <div class="card-content">\n              <paper-input label="Phone Number" id="phone-number"></paper-input>\n              <paper-textarea label="Message" id="message"></paper-textarea>\n            </div>\n            <div class="card-actions">\n              <mwc-button id="send-button">Send</mwc-button>\n            </div>\n          </ha-card>\n        ',this.content=!0,this.querySelector("#send-button").addEventListener("click",(()=>{const s=this.querySelector("#phone-number").value,t=this.querySelector("#message").value;s&&t?this._sendSms(e,s,t):this._showToast("Please enter both phone number and message")})))}_showToast(e){const s=new CustomEvent("hass-notification",{detail:{message:e}});window.dispatchEvent(s)}_sendSms(e,s,t){e.callService("rest_command","send_sms",{phone_number:s,message:t}).then((()=>{this._showToast("SMS sent successfully"),this.querySelector("#phone-number").value="",this.querySelector("#message").value=""})).catch((e=>{this._showToast(`Error sending SMS: ${e.message}`)}))}static getConfigElement(){return document.createElement("sms-sender-card-editor")}static getStubConfig(){return{}}}customElements.define("sms-sender-card",e);class s extends HTMLElement{setConfig(e){this.config=e}get value(){return this.config}render(){return html`<p>No configuration options available</p>`}}customElements.define("sms-sender-card-editor",s),window.customCards=window.customCards||[],window.customCards.push({type:"sms-sender-card",name:"SMS Sender Card",description:"A card that allows sending SMS messages"})})();