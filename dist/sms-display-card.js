(()=>{class e extends HTMLElement{constructor(){super(),this.messages=[]}set hass(e){this._hass=e,this.content||(this.innerHTML='\n          <ha-card header="SMS Messages">\n            <div class="card-content">\n              <div id="messages-container" style="max-height: 300px; overflow-y: auto;"></div>\n            </div>\n          </ha-card>\n        ',this.content=!0,this.messagesContainer=this.querySelector("#messages-container")),this._updateMessages(e)}setConfig(e){if(!e.entity)throw new Error("You need to define an entity");this.config=e}_updateMessages(e){const s=this.config.entity;if(s&&e.states[s])try{const t=JSON.parse(e.states[s].state);if(!Array.isArray(t))return void(this.messagesContainer.innerHTML="Invalid message data format");JSON.stringify(t)!==JSON.stringify(this.messages)&&(this.messages=t,this._renderMessages())}catch(e){this.messagesContainer.innerHTML=`Error parsing message data: ${e.message}`}else this.messagesContainer.innerHTML="Entity not found"}_renderMessages(){if(this.messagesContainer.innerHTML="",0===this.messages.length){const e=document.createElement("div");return e.innerText="No messages",void this.messagesContainer.appendChild(e)}this.messages.slice().reverse().forEach((e=>{const s=document.createElement("div");s.className="message",s.style.padding="8px",s.style.marginBottom="8px",s.style.borderLeft="3px solid var(--primary-color)",s.style.backgroundColor="var(--secondary-background-color)",s.innerHTML=`\n          <div style="font-weight: bold;">${e.from||"Unknown"}</div>\n          <div>${e.content}</div>\n          <div style="font-size: 0.8em; color: var(--secondary-text-color);">\n            ${new Date(e.timestamp).toLocaleString()}\n          </div>\n        `,this.messagesContainer.appendChild(s)}))}static getConfigElement(){return document.createElement("sms-display-card-editor")}static getStubConfig(){return{entity:"sensor.sms_messages"}}}customElements.define("sms-display-card",e);class s extends HTMLElement{setConfig(e){this.config=e||{entity:""}}get value(){return this.config}render(){return html`
        <paper-input
          label="Entity ID"
          .value=${this.config.entity}
          @value-changed=${this._valueChanged}
        ></paper-input>
      `}_valueChanged(e){if(!this.config)return;this.config={...this.config,entity:e.target.value};const s=new CustomEvent("config-changed",{detail:{config:this.config}});this.dispatchEvent(s)}}customElements.define("sms-display-card-editor",s),window.customCards=window.customCards||[],window.customCards.push({type:"sms-display-card",name:"SMS Display Card",description:"A card that displays received SMS messages"})})();